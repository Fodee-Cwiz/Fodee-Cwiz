num = int(input())
max = 0
first_n = 0
third_n = 0
while num != 0:
    if (num > 99) and (num < 1000):
        first_n = num // 100
        third_n = num % 10
        if (first_n > third_n) and (num > max):
            max = num
    num = int(input())
print(max)


# # 1 из 5 с помощью кода
# def f(flag, x):
#     var = 0
#     if flag == 1:
#         if x < 10:
#             var = 10
#         if 9 < x < 100:
#             var = 100
#         return x + var
#     if flag == 2:
#         return x / 4
#
#
# x = 8
# for flag in range(1, 3):
#     for flag1 in range(1, 3):
#         for flag2 in range(1, 3):
#             for flag3 in range(1, 3):
#                 for flag4 in range(1, 3):
#                     if f(flag, f(flag1, f(flag2, f(flag3, f(flag4, x))))) == 7:
#                         print(flag4, flag3, flag2, flag1, flag)


# # третья задача по факту не необходимая но лучше разобрать
# total_input = int(input())
# index = 0
# max_sevens = 0
# min_num_with_max_sevens = float('inf')
#
# for i in range (1, total_input + 1):
#     input_num = int(input())
#     octal = oct(input_num) [2:] # Получаем восьмеричное представление числа, убирая "0o" в начале
#     count_sevens = octal.count('7')
#     if count_sevens > max_sevens or (count_sevens == max_sevens and input_num < min_num_with_max_sevens):
#         max_sevens = count_sevens
#         min_num_with_max_sevens = input_num
#         index = i
#
# print(index)


# # первая из сложных кстати в сборнике неправильно
# totalInput = int(input())
# sum = 0
# count = 0
# for i in range(totalInput):
#     inputNum = int(input())
#     sum += inputNum
#     if (inputNum > 9 < 100) & (inputNum % 3 == 0):
#         count += 1
# avarage = sum / totalInput
# print(avarage)

